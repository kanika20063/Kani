# Recreating the source code package after execution state reset
import os
import zipfile
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
import joblib
# Create directory structure
project_dir = "/mnt/data/movie_recommender_project"
os.makedirs(project_dir, exist_ok=True)
# streamlit app
streamlit_app = """import streamlit as st
import numpy as np
import joblib
# Load model
model = joblib.load("model.pkl")
st.title("ðŸŽ¬ Movie Rating Predictor")
st.write("Predict a movie rating based on popularity and duration")

# Input form
num_ratings = st.number_input("Number of Ratings", min_value=0, value=1500)
duration = st.number_input("Duration (minutes)", min_value=30, max_value=300, value=120)
# Prediction
if st.button("Predict Rating"):
    input_features = np.log1p(num_ratings), duration
    input_array = np.array([input_features]).reshape(1, -2)
    pred = model.predict(input_array)[0]
    st.success(f"ðŸŽ¯ Predicted Movie Rating: {pred:.2f}")
"""
# model training script
train_model = """import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
import joblib
# Sample data
df = pd.DataFrame({
    'rating': [9.0, 8.5, 8.7, 8.6, 8.0, 7.9, 8.4],
    'num_ratings': [1500, 2000, 1600, 1700, 1400, 1800, 1300],
    'duration_mins': [148, 195, 136, 169, 123, 162, 122]
})

df['log_num_ratings'] = np.log1p(df['num_ratings'])
X = df[['log_num_ratings', 'duration_mins']]
y = df['rating']
# Train model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X, y)
# Save model
joblib.dump(model, "model.pkl")
# requirements.txt
requirements_txt = """streamlit
scikit-learn
pandas
numpy
joblib
# Save files
with open(os.path.join(project_dir, "streamlit_app.py"), "w") as f:
    f.write(streamlit_app)
with open(os.path.join(project_dir, "train_model.py"), "w") as f:
    f.write(train_model)

with open(os.path.join(project_dir, "requirements.txt"), "w") as f:
    f.write(requirements_txt)
# Train model and save
df = pd.DataFrame({
    'rating': [9.0, 8.5, 8.7, 8.6, 8.0, 7.9, 8.4],
    'num_ratings': [1500, 2000, 1600, 1700, 1400, 1800, 1300],
    'duration_mins': [148, 195, 136, 169, 123, 162, 122]
})
df['log_num_ratings'] = np.log1p(df['num_ratings'])
X = df[['log_num_ratings', 'duration_mins']]
y = df['rating']
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X, y)
joblib.dump(model, os.path.join(project_dir, "model.pkl"))
# Create zip
zip_path = "/mnt/data/movie_recommender_project.zip"
with zipfile.ZipFile(zip_path, 'w') as zipf:
    for foldername, _, filenames in os.walk(project_dir):
        for filename in filenames:
            file_path = os.path.join(foldername, filename)
            arcname = os.path.relpath(file_path, project_dir)
            zipf.write(file_path, arcname=arcname)
zip_path
output :'/mnt/data/movie_recommender_project.zip'
This ZIP file contains:
streamlit_app.py â€“ UI for deployment
train_model.py â€“ Code to train and save the model
model.pkl â€“ Trained Random Forest model
requirements.txt â€“ Dependencies for deployment
